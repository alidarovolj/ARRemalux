#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SegFormer ONNX ‚Üí TensorFlow Lite –¥–ª—è Android
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: onnx-tensorflow + TFLite converter
"""

import sys
import os
from pathlib import Path

try:
    import onnx
    from onnx_tf.backend import prepare
    import tensorflow as tf
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("  pip install onnx tensorflow onnx-tf")
    sys.exit(1)

def convert_onnx_to_tflite():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SegFormer ONNX –º–æ–¥–µ–ª—å –≤ TensorFlow Lite —Ñ–æ—Ä–º–∞—Ç"""
    
    # –ü—É—Ç–∏
    script_dir = Path(__file__).parent
    onnx_path = script_dir / "optimum:segformer-b0-finetuned-ade-512-512" / "model.onnx"
    output_dir = script_dir / "TFLite"
    output_dir.mkdir(exist_ok=True)
    
    tf_model_path = output_dir / "segformer_tf"
    tflite_fp32_path = output_dir / "segformer_fp32.tflite"
    tflite_fp16_path = output_dir / "segformer_fp16.tflite"
    
    if not onnx_path.exists():
        print(f"‚ùå ONNX –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {onnx_path}")
        return False
    
    print("=" * 60)
    print("ü§ñ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SegFormer-B0 ONNX ‚Üí TensorFlow Lite")
    print("=" * 60)
    print(f"üìÅ Input:  {onnx_path}")
    print(f"üìÅ Output: {tflite_fp16_path}")
    print()
    
    try:
        # –®–∞–≥ 1: ONNX ‚Üí TensorFlow
        print("üì• –®–∞–≥ 1/3: –ó–∞–≥—Ä—É–∑–∫–∞ ONNX –º–æ–¥–µ–ª–∏...")
        onnx_model = onnx.load(str(onnx_path))
        
        print("‚úÖ ONNX –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   IR Version: {onnx_model.ir_version}")
        print()
        
        print("üîÑ –®–∞–≥ 2/3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ONNX ‚Üí TensorFlow...")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        tf_rep = prepare(onnx_model)
        tf_rep.export_graph(str(tf_model_path))
        
        print(f"‚úÖ TensorFlow –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {tf_model_path}")
        print()
        
        # –®–∞–≥ 2: TensorFlow ‚Üí TFLite (FP32)
        print("üóúÔ∏è  –®–∞–≥ 3/3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TensorFlow ‚Üí TFLite...")
        
        converter = tf.lite.TFLiteConverter.from_saved_model(str(tf_model_path))
        tflite_model = converter.convert()
        
        with open(tflite_fp32_path, 'wb') as f:
            f.write(tflite_model)
        
        size_fp32_mb = os.path.getsize(tflite_fp32_path) / (1024 * 1024)
        print(f"‚úÖ TFLite FP32 –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {tflite_fp32_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_fp32_mb:.1f} MB")
        print()
        
        # –®–∞–≥ 3: Quantization (FP16)
        print("üóúÔ∏è  Quantization (FP16) –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞...")
        
        converter_fp16 = tf.lite.TFLiteConverter.from_saved_model(str(tf_model_path))
        converter_fp16.optimizations = [tf.lite.Optimize.DEFAULT]
        converter_fp16.target_spec.supported_types = [tf.float16]
        
        tflite_model_fp16 = converter_fp16.convert()
        
        with open(tflite_fp16_path, 'wb') as f:
            f.write(tflite_model_fp16)
        
        size_fp16_mb = os.path.getsize(tflite_fp16_path) / (1024 * 1024)
        print(f"‚úÖ TFLite FP16 –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {tflite_fp16_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_fp16_mb:.1f} MB")
        print(f"üìâ –°–∂–∞—Ç–∏–µ: {(1 - size_fp16_mb/size_fp32_mb) * 100:.1f}%")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TFLite –º–æ–¥–µ–ª–∏...")
        interpreter = tf.lite.Interpreter(model_path=str(tflite_fp16_path))
        interpreter.allocate_tensors()
        
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        
        print("   Input:")
        for inp in input_details:
            print(f"     Shape: {inp['shape']}, Dtype: {inp['dtype']}")
        
        print("   Output:")
        for out in output_details:
            print(f"     Shape: {out['shape']}, Dtype: {out['dtype']}")
        print()
        
        print("=" * 60)
        print("üéâ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print("=" * 60)
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ segformer_fp16.tflite –≤ Assets/StreamingAssets/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ Android TFLite –ø–ª–∞–≥–∏–Ω (TFLiteSegmentation.kt)")
        print("3. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ Android –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = convert_onnx_to_tflite()
    sys.exit(0 if success else 1)


