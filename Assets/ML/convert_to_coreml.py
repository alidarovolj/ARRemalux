#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SegFormer ONNX ‚Üí CoreML –¥–ª—è iOS
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: onnx-coreml –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ + quantization FP16
"""

import sys
import os
from pathlib import Path

try:
    import onnx
    from onnx_coreml import convert
    import coremltools as ct
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("  pip install onnx 'coremltools<7.0' onnx-coreml")
    sys.exit(1)

def convert_onnx_to_coreml():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SegFormer ONNX –º–æ–¥–µ–ª—å –≤ CoreML —Ñ–æ—Ä–º–∞—Ç"""
    
    # –ü—É—Ç–∏
    script_dir = Path(__file__).parent
    onnx_path = script_dir / "optimum:segformer-b0-finetuned-ade-512-512" / "model.onnx"
    output_dir = script_dir / "CoreML"
    output_dir.mkdir(exist_ok=True)
    
    output_path = output_dir / "SegFormerB0.mlmodel"
    
    if not onnx_path.exists():
        print(f"‚ùå ONNX –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {onnx_path}")
        return False
    
    print("=" * 60)
    print("ü§ñ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SegFormer-B0 ONNX ‚Üí CoreML")
    print("=" * 60)
    print(f"üìÅ Input:  {onnx_path}")
    print(f"üìÅ Output: {output_path}")
    print()
    
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å ONNX –º–æ–¥–µ–ª—å
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ ONNX –º–æ–¥–µ–ª–∏...")
        onnx_model = onnx.load(str(onnx_path))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        print("‚úÖ ONNX –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   IR Version: {onnx_model.ir_version}")
        print(f"   Producer: {onnx_model.producer_name}")
        print()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ONNX ‚Üí CoreML
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CoreML...")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ onnx-coreml
        mlmodel = convert(
            onnx_model,
            minimum_ios_deployment_target='13'
        )
        
        print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CoreML –º–æ–¥–µ–ª–∏...")
        mlmodel.save(str(output_path))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        size_mb = os.path.getsize(output_path) / (1024 * 1024)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
        print()
        
        # Quantization (FP16) –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        print("üóúÔ∏è  Quantization (FP16) –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞...")
        quantized_path = output_dir / "SegFormerB0_FP16.mlmodel"
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è quantization
        model = ct.models.MLModel(str(output_path))
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å FP16 quantization
        model_fp16 = ct.models.neural_network.quantization_utils.quantize_weights(
            model, 
            nbits=16
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å quantized –º–æ–¥–µ–ª—å
        model_fp16.save(str(quantized_path))
        
        quantized_size_mb = os.path.getsize(quantized_path) / (1024 * 1024)
        print(f"‚úÖ Quantized –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {quantized_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {quantized_size_mb:.1f} MB")
        print(f"üìâ –°–∂–∞—Ç–∏–µ: {(1 - quantized_size_mb/size_mb) * 100:.1f}%")
        print()
        
        print("=" * 60)
        print("üéâ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print("=" * 60)
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SegFormerB0_FP16.mlmodel –≤ Assets/StreamingAssets/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ iOS native –ø–ª–∞–≥–∏–Ω (CoreMLSegmentation.mm)")
        print("3. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ Xcode –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = convert_onnx_to_coreml()
    sys.exit(0 if success else 1)

