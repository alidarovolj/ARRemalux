#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π CoreML –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
–≠—Ç–∞ –º–æ–¥–µ–ª—å –ù–ï –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞!
"""

import sys
from pathlib import Path

print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π CoreML –º–æ–¥–µ–ª–∏...")
print()

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å coremltools –ª—é–±–æ–π –≤–µ—Ä—Å–∏–∏
try:
    import coremltools as ct
    print(f"‚úÖ coremltools {ct.__version__} –Ω–∞–π–¥–µ–Ω")
except:
    print("‚ùå coremltools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install coremltools")
    sys.exit(1)

try:
    import numpy as np
    print(f"‚úÖ numpy {np.__version__} –Ω–∞–π–¥–µ–Ω")
except:
    print("‚ùå numpy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

print()

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å (512x512 ‚Üí 512x512 –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞...")

# –ü—É—Ç—å –≤—ã–≤–æ–¥–∞
output_dir = Path(__file__).parent / "CoreML"
output_dir.mkdir(exist_ok=True)
output_path = output_dir / "SegFormerB0_FP16_TEST.mlmodel"

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ coremltools builder
from coremltools.models import neural_network
from coremltools.models import datatypes

input_features = [('image', datatypes.Array(512, 512, 3))]
output_features = [('segmentation', datatypes.Array(512, 512))]

builder = neural_network.NeuralNetworkBuilder(
    input_features,
    output_features,
    mode=None
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–π (–ø—Ä–æ—Å—Ç–æ –¥–ª—è —Ñ–æ—Ä–º—ã)
builder.add_flatten(name='flatten', input_name='image', output_name='flat', mode=0)
builder.add_reshape_static(
    name='reshape',
    input_name='flat',
    output_name='segmentation',
    output_shape=(512, 512)
)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
model = ct.models.MLModel(builder.spec)
model.save(str(output_path))

size_mb = output_path.stat().st_size / (1024 * 1024)
print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
print()
print("‚ö†Ô∏è  –≠–¢–û –¢–ï–°–¢–û–í–ê–Ø –ú–û–î–ï–õ–¨!")
print("   –û–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é.")
print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ iOS –ø–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç.")
print()
print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
print(f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ {output_path}")
print("   –≤ Assets/StreamingAssets/SegFormerB0_FP16.mlmodel")
print("2. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Unity")
print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ ML –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ª–æ–≥–∏)")
print()
print("–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –†–ï–ê–õ–¨–ù–£–Æ –º–æ–¥–µ–ª—å SegFormer!")


