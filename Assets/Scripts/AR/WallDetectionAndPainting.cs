using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.EnhancedTouch;
using Touch = UnityEngine.InputSystem.EnhancedTouch.Touch;

namespace RemaluxAR.AR
{
    /// <summary>
    /// –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ç–µ–Ω –∏ –∏—Ö –æ–∫—Ä–∞—Å–∫–∏
    /// –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    [RequireComponent(typeof(ARPlaneManager))]
    [RequireComponent(typeof(ARRaycastManager))]
    public class WallDetectionAndPainting : MonoBehaviour
    {
        [Header("References")]
        [SerializeField] private ARPlaneManager planeManager;
        [SerializeField] private ARRaycastManager raycastManager;
        [SerializeField] private Camera arCamera;
        
        [Header("ML Segmentation (Dulux mode)")]
        [Tooltip("ML Manager –¥–ª—è pixel-perfect –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–µ–Ω. –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∂–∏–º '–∫–ª–∏–∫ ‚Üí –≤—Å—è —Å—Ç–µ–Ω–∞'")]
        [SerializeField] private RemaluxAR.ML.MLSegmentationManager mlSegmentationManager;
        
        [Header("Hybrid Wall Detection (–ù–û–í–û–ï!)")]
        [Tooltip("üÜï –ì–ò–ë–†–ò–î–ù–´–ô –¥–µ—Ç–µ–∫—Ç–æ—Ä: Depth + Segmentation + AR Planes. –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤!")]
        [SerializeField] private RemaluxAR.ML.HybridWallDetector hybridWallDetector;
        
        [Tooltip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è!)")]
        [SerializeField] private bool useHybridDetection = true;

        [Header("Wall Detection Settings")]
        [SerializeField] private bool showWallBorders = true;
        [SerializeField] private Material wallMaterial;
        [SerializeField] private Material floorMaterial;
        
        [Header("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")]
        [Tooltip("üîß DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –í–°–ï –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ)")]
        [SerializeField] private bool debugShowAllPlanes = false;
        
        [Header("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π - –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –ú–Ø–ì–ö–ò–ï –¥–ª—è DEBUG")]
        [Tooltip("üî• DEBUG: 0.2 –º¬≤ - –í–ò–î–ò–ú –í–°–Å!")]
        [SerializeField] private float minWallArea = 0.2f;
        
        [Tooltip("üî• DEBUG: 0.2 –º - –ú–ò–ù–ò–ú–£–ú –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")]
        [SerializeField] private float minWallHeight = 0.2f;
        
        [Tooltip("üî• DEBUG: 0.2 - –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å—ë")]
        [SerializeField] private float minAspectRatio = 0.2f;
        
        [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ (6.0 = –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–µ —Å—Ç–µ–Ω—ã OK)")]
        [SerializeField] private float maxAspectRatio = 6.0f;
        
        [Tooltip("üî• DEBUG: 0.1 –º - –ø–æ—á—Ç–∏ –Ω–∞ –ø–æ–ª—É!")]
        [SerializeField] private float minCenterHeightY = 0.1f;

        [Header("Painting Settings")]
        [SerializeField] private Color paintColor = new Color(0.89f, 0.82f, 0.76f); // –ë–µ–∂–µ–≤—ã–π –∫–∞–∫ Dulux
        [SerializeField] private GameObject paintPrefab;
        [SerializeField] private float paintSize = 0.05f; // 5 —Å–º
        
        [Header("Painting Mode - –ö–ê–ö DULUX!")]
        [Tooltip("üé® –†–ï–ñ–ò–ú DULUX: –ö–ª–∏–∫ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç –í–°–Æ –°–¢–ï–ù–£! (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è!)")]
        [SerializeField] private bool fillWholeWallMode = true;
        
        [Tooltip("Wall Painting Manager –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –≤—Å–µ–π —Å—Ç–µ–Ω—ã")]
        [SerializeField] private WallPaintingManager wallPaintingManager;
        
        [Header("UI –ü–æ–¥—Å–∫–∞–∑–∫–∏")]
        [SerializeField] private bool showHints = true;
        [SerializeField] private float hintDuration = 5f; // –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
        
        [Header("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")]
        [SerializeField] private float planeUpdateThrottle = 0.1f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (—Å–µ–∫)

        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã
        private Dictionary<TrackableId, ARPlane> detectedWalls = new Dictionary<TrackableId, ARPlane>();
        private List<GameObject> paintMarks = new List<GameObject>();
        private float lastPlaneUpdateTime = 0f; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        private Coroutine scanningHintsCoroutine; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä—É—Ç–∏–Ω—É –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

        private void Awake()
        {
            // Auto-find –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if (planeManager == null) planeManager = GetComponent<ARPlaneManager>();
            if (raycastManager == null) raycastManager = GetComponent<ARRaycastManager>();
            if (arCamera == null) arCamera = Camera.main;
            
            // Auto-find WallPaintingManager
            if (wallPaintingManager == null)
            {
                wallPaintingManager = FindObjectOfType<WallPaintingManager>();
                
                if (wallPaintingManager == null && fillWholeWallMode)
                {
                    // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω fillWholeWallMode
                    GameObject managerGO = new GameObject("WallPaintingManager");
                    wallPaintingManager = managerGO.AddComponent<WallPaintingManager>();
                    Debug.Log("[WallDetection] ‚úÖ WallPaintingManager —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
                }
            }

            // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–µ—Ñ–∞–± –¥–ª—è –∫—Ä–∞—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω (–¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
            if (paintPrefab == null)
            {
                paintPrefab = CreateDefaultPaintPrefab();
            }

            // –°–æ–∑–¥–∞—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
            if (wallMaterial == null)
            {
                wallMaterial = CreateDefaultMaterial(new Color(1f, 0f, 0f, 0.3f)); // –ö—Ä–∞—Å–Ω—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            }
            if (floorMaterial == null)
            {
                floorMaterial = CreateDefaultMaterial(new Color(0f, 1f, 0f, 0.3f)); // –ó–µ–ª—ë–Ω—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            }
        }

        private void OnEnable()
        {
            if (planeManager != null)
            {
                planeManager.planesChanged += OnPlanesChanged;
                Debug.Log("[WallDetection] –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
            }
        }

        private void OnDisable()
        {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            if (planeManager != null)
            {
                planeManager.planesChanged -= OnPlanesChanged;
            }
            
            // –û—Ç–∫–ª—é—á–∞–µ–º Enhanced Touch
            if (EnhancedTouchSupport.enabled)
            {
                EnhancedTouchSupport.Disable();
            }
        }

        private void Start()
        {
            // –í–∫–ª—é—á–∞–µ–º Enhanced Touch –¥–ª—è –Ω–æ–≤–æ–≥–æ Input System
            EnhancedTouchSupport.Enable();
            
            Debug.Log("[WallDetection] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è!");
            Debug.Log("[WallDetection] –ö–ª–∏–∫–∞–π—Ç–µ/—Ç–∞–ø–∞–π—Ç–µ –Ω–∞ —Å—Ç–µ–Ω—ã –¥–ª—è –∏—Ö –æ–∫—Ä–∞—Å–∫–∏.");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if (debugShowAllPlanes)
            {
                Debug.LogWarning("[WallDetection] üîß DEBUG MODE: –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –í–°–ï –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤!");
            }
            else
            {
                Debug.Log($"[WallDetection] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:");
                Debug.Log($"  - minWallArea: {minWallArea} –º¬≤");
                Debug.Log($"  - minWallHeight: {minWallHeight} –º");
                Debug.Log($"  - minAspectRatio: {minAspectRatio}");
                Debug.Log($"  - maxAspectRatio: {maxAspectRatio}");
                Debug.Log($"  - minCenterHeightY: {minCenterHeightY} –º");
            }
            
            // ML —Ä–µ–∂–∏–º
            if (fillWholeWallMode)
            {
                if (mlSegmentationManager != null)
                {
                    Debug.Log("[WallDetection] üé® –†–µ–∂–∏–º '–í—Å—è —Å—Ç–µ–Ω–∞' (Dulux) –∞–∫—Ç–∏–≤–µ–Ω —Å ML!");
                }
                else
                {
                    Debug.LogWarning("[WallDetection] ‚ö†Ô∏è –†–µ–∂–∏–º '–í—Å—è —Å—Ç–µ–Ω–∞' –≤–∫–ª—é—á—ë–Ω, –Ω–æ MLSegmentationManager –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if (showHints)
            {
                scanningHintsCoroutine = StartCoroutine(ShowScanningHints());
            }
        }
        
        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private System.Collections.IEnumerator ShowScanningHints()
        {
            yield return new WaitForSeconds(1f);
            
            Debug.Log("üí° [–ü–û–î–°–ö–ê–ó–ö–ê] –ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
            yield return new WaitForSeconds(hintDuration);
            
            Debug.Log("üí° [–ü–û–î–°–ö–ê–ó–ö–ê] –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —Å—Ç–µ–Ω—ã –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ —É–≥–ª–∞–º–∏");
            yield return new WaitForSeconds(hintDuration);
            
            Debug.Log("üí° [–ü–û–î–°–ö–ê–ó–ö–ê] –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —É—Å–∫–æ—Ä—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π");
        }

        private void Update()
        {
            HandleInput();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π (–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï)
        /// </summary>
        private void OnPlanesChanged(ARPlanesChangedEventArgs args)
        {
            // Throttling: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ CPU
            float currentTime = Time.time;
            if (currentTime - lastPlaneUpdateTime < planeUpdateThrottle)
            {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            }
            lastPlaneUpdateTime = currentTime;
            
            // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–´–• –ü–õ–û–°–ö–û–°–¢–ï–ô (args.added)
            foreach (var plane in args.added)
            {
                ProcessAddedPlane(plane);
            }

            // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–ù–û–í–õ–ï–ù–ù–´–• –ü–õ–û–°–ö–û–°–¢–ï–ô (args.updated)
            // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–≥, –≥–¥–µ –ø–ª–æ—Å–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–∞–ª–∞—Å—å —Å 1.6–º¬≤ –¥–æ 0.51–º¬≤ –Ω–æ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –∫–∞–∫ "—Å—Ç–µ–Ω–∞"
            foreach (var plane in args.updated)
            {
                ProcessUpdatedPlane(plane);
            }

            // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –£–î–ê–õ–ï–ù–ù–´–• –ü–õ–û–°–ö–û–°–¢–ï–ô (args.removed)
            foreach (var plane in args.removed)
            {
                ProcessRemovedPlane(plane);
            }

            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            UpdateDebugStats();
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å
        /// </summary>
        private void ProcessAddedPlane(ARPlane plane)
        {
            if (ShouldProcessPlane(plane))
            {
                if (!detectedWalls.ContainsKey(plane.trackableId))
                {
                    detectedWalls.Add(plane.trackableId, plane);
                    ApplyWallVisualization(plane);
                    Debug.Log($"[WallDetection] ‚úÖ –ù–û–í–ê–Ø –°–¢–ï–ù–ê –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! ID: {plane.trackableId}, —Ä–∞–∑–º–µ—Ä: {plane.size}");
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å—Ç–µ–Ω—ã
                    if (detectedWalls.Count == 1 && scanningHintsCoroutine != null)
                    {
                        StopCoroutine(scanningHintsCoroutine);
                        scanningHintsCoroutine = null;
                        Debug.Log("[WallDetection] –ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –ø–µ—Ä–≤–∞—è —Å—Ç–µ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!");
                    }
                }
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê)
        /// </summary>
        private void ProcessUpdatedPlane(ARPlane plane)
        {
            bool isCurrentlyWall = detectedWalls.ContainsKey(plane.trackableId);
            bool shouldBeWall = ShouldProcessPlane(plane);

            if (shouldBeWall)
            {
                if (!isCurrentlyWall)
                {
                    // –ü–ª–æ—Å–∫–æ—Å—Ç—å "–≤—ã—Ä–æ—Å–ª–∞" –∏ –¢–ï–ü–ï–†–¨ —Å—Ç–∞–ª–∞ –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç–µ–Ω–æ–π
                    detectedWalls.Add(plane.trackableId, plane);
                    ApplyWallVisualization(plane);
                    Debug.Log($"[WallDetection] ‚úÖ –°–¢–ï–ù–ê –û–ë–ù–û–í–ò–õ–ê–°–¨ (—Å—Ç–∞–ª–∞ –≤–∞–ª–∏–¥–Ω–æ–π)! ID: {plane.trackableId}, —Ä–∞–∑–º–µ—Ä: {plane.size}");
                }
                else
                {
                    // –ü–ª–æ—Å–∫–æ—Å—Ç—å –≤—Å–µ –µ—â–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–µ–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –≥—Ä–∞–Ω–∏—Ü—ã
                    UpdateWallVisualization(plane);
                }
            }
            else
            {
                if (isCurrentlyWall)
                {
                    // ‚ö†Ô∏è –≠–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê 0.51–º¬≤!
                    // –ü–ª–æ—Å–∫–æ—Å—Ç—å "—É–º–µ–Ω—å—à–∏–ª–∞—Å—å" –∏ –ë–û–õ–¨–®–ï –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å—Ç–µ–Ω—ã
                    detectedWalls.Remove(plane.trackableId);
                    plane.gameObject.SetActive(false);
                    Debug.LogWarning($"[WallDetection] ‚ùå –°–¢–ï–ù–ê –£–î–ê–õ–ï–ù–ê (—Å—Ç–∞–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π)! ID: {plane.trackableId}, —Ä–∞–∑–º–µ—Ä: {plane.size}");
                }
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ ARKit
        /// </summary>
        private void ProcessRemovedPlane(ARPlane plane)
        {
            if (detectedWalls.ContainsKey(plane.trackableId))
            {
                detectedWalls.Remove(plane.trackableId);
                Debug.Log($"[WallDetection] ‚ùå –°–¢–ï–ù–ê –£–î–ê–õ–ï–ù–ê (ARKit)! ID: {plane.trackableId}");
            }
        }

        /// <summary>
        /// –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        /// </summary>
        private void UpdateDebugStats()
        {
            int wallCount = detectedWalls.Count;
            int totalPlanes = 0;
            foreach (var plane in planeManager.trackables)
            {
                totalPlanes++;
            }
            Debug.Log($"[WallDetection] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π: {totalPlanes}, –∏–∑ –Ω–∏—Ö —Å—Ç–µ–Ω: {wallCount}");
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
        /// </summary>
        private bool ShouldProcessPlane(ARPlane plane)
        {
            Vector3 planePosition = plane.transform.position;
            Vector2 planeSize = plane.size;
            float planeArea = planeSize.x * planeSize.y;
            float aspectRatio = planeSize.x / planeSize.y;
            float centerHeight = planePosition.y;
            
            // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ª–æ–≥–æ–≤ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            string planeInfo = $"[{planeSize.x:F2}–º √ó {planeSize.y:F2}–º = {planeArea:F2}–º¬≤, aspect: {aspectRatio:F2}]";
            
            // üîß DEBUG MODE: –ü–æ–∫–∞–∑–∞—Ç—å –í–°–ï –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if (debugShowAllPlanes)
            {
                if (plane.alignment == PlaneAlignment.Vertical)
                {
                    Debug.LogWarning($"[WallDetection] üîß DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –ë–ï–ó –§–ò–õ–¨–¢–†–û–í: {planeInfo}");
                    return true;
                }
                return false;
            }
            
            // ‚úÖ –§–ò–õ–¨–¢–† 1: –¢–û–õ–¨–ö–û –í–ï–†–¢–ò–ö–ê–õ–¨–ù–´–ï –ü–õ–û–°–ö–û–°–¢–ò (–°–¢–ï–ù–´)
            if (plane.alignment != PlaneAlignment.Vertical)
            {
                return false; // –ú–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–∏—Ö –º–Ω–æ–≥–æ)
            }
            
            // ‚úÖ –§–ò–õ–¨–¢–† 2: –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ü–õ–û–©–ê–î–¨
            if (planeArea < minWallArea)
            {
                // –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
                if (planeArea < 0.2f || planeArea > minWallArea * 0.8f)
                {
                    Debug.Log($"[WallDetection] ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏: {planeInfo} < {minWallArea:F1}–º¬≤");
                }
                return false;
            }
            
            // ‚úÖ –§–ò–õ–¨–¢–† 3: –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –í–´–°–û–¢–ê
            if (planeSize.y < minWallHeight)
            {
                Debug.LogWarning($"[WallDetection] ‚ùå –ò–≥–Ω–æ—Ä: {planeInfo} –í—ã—Å–æ—Ç–∞ {planeSize.y:F2}–º < {minWallHeight}–º");
                return false;
            }
            
            // ‚úÖ –§–ò–õ–¨–¢–† 4: ASPECT RATIO (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô!)
            if (aspectRatio < minAspectRatio)
            {
                Debug.LogWarning($"[WallDetection] ‚ùå –ò–≥–Ω–æ—Ä –î–í–ï–†–¨/–ö–û–°–Ø–ö: {planeInfo} aspect < {minAspectRatio} (—Å–ª–∏—à–∫–æ–º —É–∑–∫–∞—è)");
                return false;
            }
            
            if (aspectRatio > maxAspectRatio)
            {
                Debug.LogWarning($"[WallDetection] ‚ùå –ò–≥–Ω–æ—Ä: {planeInfo} aspect > {maxAspectRatio} (—Å—Ç—Ä–∞–Ω–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è)");
                return false;
            }
            
            // ‚úÖ –§–ò–õ–¨–¢–† 5: –í–´–°–û–¢–ê –¶–ï–ù–¢–†–ê –ü–õ–û–°–ö–û–°–¢–ò
            if (centerHeight < minCenterHeightY)
            {
                Debug.LogWarning($"[WallDetection] ‚ùå –ò–≥–Ω–æ—Ä –ú–ï–ë–ï–õ–¨: {planeInfo} centerY: {centerHeight:F2}–º < {minCenterHeightY}–º");
                return false;
            }
            
            // ‚úÖ –í–°–ï –§–ò–õ–¨–¢–†–´ –ü–†–û–ô–î–ï–ù–´ - –≠–¢–û –°–¢–ï–ù–ê!
            Debug.Log($"[WallDetection] ‚úÖ –í–ê–õ–ò–î–ù–ê–Ø –°–¢–ï–ù–ê: {planeInfo}");
            return true;
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫ —Å—Ç–µ–Ω–µ
        /// </summary>
        private void ApplyWallVisualization(ARPlane plane)
        {
            var meshRenderer = plane.GetComponent<MeshRenderer>();
            if (meshRenderer != null)
            {
                meshRenderer.material = wallMaterial;
                meshRenderer.enabled = true;
                
                // üî• DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ mesh
                var meshFilter = plane.GetComponent<MeshFilter>();
                if (meshFilter != null && meshFilter.mesh != null)
                {
                    Debug.Log($"[WallDetection] Mesh: vertices={meshFilter.mesh.vertexCount}, triangles={meshFilter.mesh.triangles.Length/3}");
                }
                else
                {
                    Debug.LogWarning($"[WallDetection] ‚ö†Ô∏è Mesh –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ë—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ boundary.");
                }
            }
            
            plane.gameObject.SetActive(true);
            
            // –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç–µ–Ω—ã (–í–°–ï–ì–î–ê –¥–ª—è DEBUG)
            VisualizeWallBorders(plane);
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–µ–Ω—ã
        /// </summary>
        private void UpdateWallVisualization(ARPlane plane)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç–µ–Ω—ã (–æ–Ω–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
            if (showWallBorders)
            {
                VisualizeWallBorders(plane);
            }
        }

        /// <summary>
        /// –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç–µ–Ω—ã
        /// </summary>
        private void VisualizeWallBorders(ARPlane plane)
        {
            // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            if (plane.boundary.Length > 0)
            {
                var lineRenderer = plane.gameObject.GetComponent<LineRenderer>();
                if (lineRenderer == null)
                {
                    lineRenderer = plane.gameObject.AddComponent<LineRenderer>();
                    lineRenderer.startWidth = 0.02f;
                    lineRenderer.endWidth = 0.02f;
                    lineRenderer.material = new Material(Shader.Find("Sprites/Default"));
                    lineRenderer.startColor = Color.yellow;
                    lineRenderer.endColor = Color.yellow;
                    lineRenderer.useWorldSpace = false;
                    lineRenderer.loop = true;
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –≥—Ä–∞–Ω–∏—Ü—ã
                var boundary = plane.boundary;
                lineRenderer.positionCount = boundary.Length;
                for (int i = 0; i < boundary.Length; i++)
                {
                    lineRenderer.SetPosition(i, boundary[i]);
                }

                Debug.Log($"[WallDetection] –ì—Ä–∞–Ω–∏—Ü—ã —Å—Ç–µ–Ω—ã –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ({boundary.Length} —Ç–æ—á–µ–∫)");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ–∫—Ä–∞—Å–∫–∏
        /// </summary>
        private void HandleInput()
        {
            // –ù–æ–≤—ã–π Input System - Enhanced Touch
            if (Touch.activeTouches.Count > 0)
            {
                Touch touch = Touch.activeTouches[0];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–∞—á–∞
                if (touch.phase == UnityEngine.InputSystem.TouchPhase.Began)
                {
                    TryPaintAtPosition(touch.screenPosition);
                }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –º—ã—à–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π)
            else if (Mouse.current != null && Mouse.current.leftButton.wasPressedThisFrame)
            {
                Vector2 mousePos = Mouse.current.position.ReadValue();
                TryPaintAtPosition(mousePos);
            }
        }

        /// <summary>
        /// –ü—ã—Ç–∞–µ—Ç—Å—è –æ–∫—Ä–∞—Å–∏—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
        /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 3 —Ä–µ–∂–∏–º–∞: 
        /// 1. –ì–∏–±—Ä–∏–¥–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä (Depth + Segmentation + AR)
        /// 2. "–í—Å—è —Å—Ç–µ–Ω–∞" —á–µ—Ä–µ–∑ ML Segmentation
        /// 3. –¢–æ—á–µ—á–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ (–±–∞–∑–æ–≤–æ–µ)
        /// </summary>
        private void TryPaintAtPosition(Vector2 screenPosition)
        {
            // üÜï –†–ï–ñ–ò–ú 1: –ì–ò–ë–†–ò–î–ù–´–ô –î–ï–¢–ï–ö–¢–û–† (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π!)
            if (useHybridDetection && hybridWallDetector != null)
            {
                TryPaintWithHybridDetector(screenPosition);
                return;
            }
            
            // –†–ï–ñ–ò–ú 2: "–í—Å—è —Å—Ç–µ–Ω–∞" —á–µ—Ä–µ–∑ ML Segmentation (–∫–∞–∫ Dulux Visualizer)
            if (fillWholeWallMode && mlSegmentationManager != null)
            {
                TryPaintWholeWall(screenPosition);
                return;
            }
            
            // –†–ï–ñ–ò–ú 3: –¢–æ—á–µ—á–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
            // –í—ã–ø–æ–ª–Ω—è–µ–º raycast
            List<ARRaycastHit> hits = new List<ARRaycastHit>();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –ø–ª–æ—Å–∫–æ—Å—Ç—è–º (—Å—Ç–µ–Ω–∞–º)
            if (raycastManager.Raycast(screenPosition, hits, TrackableType.PlaneWithinPolygon))
            {
                foreach (var hit in hits)
                {
                    var plane = planeManager.GetPlane(hit.trackableId);
                    
                    // –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–µ–Ω—ã
                    if (plane != null && plane.alignment == PlaneAlignment.Vertical)
                    {
                        PaintWall(hit.pose.position, hit.pose.rotation, plane);
                        Debug.Log($"[WallDetection] ‚úì –°—Ç–µ–Ω–∞ –æ–∫—Ä–∞—à–µ–Ω–∞! –ü–æ–∑–∏—Ü–∏—è: {hit.pose.position}");
                        return;
                    }
                }
            }
            
            Debug.Log("[WallDetection] –ö–ª–∏–∫ –Ω–µ –ø–æ–ø–∞–ª –≤ —Å—Ç–µ–Ω—É. –ù–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (—Å—Ç–µ–Ω—É).");
        }
        
        /// <summary>
        /// üÜï –ì–ò–ë–†–ò–î–ù–´–ô –†–ï–ñ–ò–ú - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Depth + Segmentation + AR Planes
        /// </summary>
        private void TryPaintWithHybridDetector(Vector2 screenPosition)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä
            if (hybridWallDetector.IsWallAtScreenPosition(screenPosition, out var wallInfo))
            {
                Debug.Log($"[WallDetection] ‚úÖ –ì–ò–ë–†–ò–î–ù–´–ô: –°—Ç–µ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! Confidence: {wallInfo.confidence:F2}, " +
                         $"Depth: {wallInfo.averageDepth:F2}, Size: {wallInfo.size}");
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º raycast –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                List<ARRaycastHit> hits = new List<ARRaycastHit>();
                
                if (raycastManager.Raycast(screenPosition, hits, TrackableType.PlaneWithinPolygon))
                {
                    foreach (var hit in hits)
                    {
                        var plane = planeManager.GetPlane(hit.trackableId);
                        
                        if (plane != null && plane.trackableId == wallInfo.arPlane.trackableId)
                        {
                            PaintWall(hit.pose.position, hit.pose.rotation, plane);
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            Debug.Log($"[WallDetection] üé® –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞:\n" +
                                     $"  ‚Ä¢ Depth consistency: {wallInfo.depthConsistency:F2}\n" +
                                     $"  ‚Ä¢ Non-wall objects: {(wallInfo.hasNonWallObjects ? "–î–∞ (people/furniture)" : "–ù–µ—Ç")}\n" +
                                     $"  ‚Ä¢ Confidence: {wallInfo.confidence:F2}");
                            
                            return;
                        }
                    }
                }
            }
            else
            {
                Debug.LogWarning("[WallDetection] ‚ùå –ì–ò–ë–†–ò–î–ù–´–ô: –ö–ª–∏–∫ –ù–ï –Ω–∞ —Å—Ç–µ–Ω–µ! " +
                                "(Depth, Segmentation –∏–ª–∏ AR Planes –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å—Ç–µ–Ω—É)");
            }
        }

        /// <summary>
        /// –†–µ–∂–∏–º "–í—Å—è —Å—Ç–µ–Ω–∞" - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ML –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ–π —Å—Ç–µ–Ω—ã –æ—Ç —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
        /// </summary>
        private void TryPaintWholeWall(Vector2 screenPosition)
        {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º screen position (0-1)
            Vector2 normalizedPos = new Vector2(
                screenPosition.x / Screen.width,
                screenPosition.y / Screen.height
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ ML, —á—Ç–æ –∫–ª–∏–∫ –Ω–∞ —Å—Ç–µ–Ω–µ
            if (!mlSegmentationManager.IsWall(normalizedPos))
            {
                int pixelClass = mlSegmentationManager.GetPixelClass(normalizedPos);
                Debug.LogWarning($"[WallDetection] ‚ùå –ö–ª–∏–∫ –ù–ï –Ω–∞ —Å—Ç–µ–Ω–µ! ML –∫–ª–∞—Å—Å: {pixelClass} (expected 0=wall)");
                return;
            }
            
            Debug.Log("[WallDetection] ‚úÖ –ö–ª–∏–∫ –Ω–∞ —Å—Ç–µ–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ ML! –ó–∞–ø—É—Å–∫ Flood Fill...");
            
            // Flood Fill - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏ —Ç–æ–π –∂–µ —Å—Ç–µ–Ω—ã
            HashSet<Vector2Int> wallPixels = mlSegmentationManager.FloodFillWall(normalizedPos);
            
            if (wallPixels == null || wallPixels.Count == 0)
            {
                Debug.LogWarning("[WallDetection] Flood Fill –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–∏–∫—Å–µ–ª–∏ —Å—Ç–µ–Ω—ã!");
                return;
            }
            
            Debug.Log($"[WallDetection] üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Å–∫—É –∫ {wallPixels.Count} –ø–∏–∫—Å–µ–ª—è–º —Å—Ç–µ–Ω—ã...");
            
            // TODO: –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –∫—Ä–∞—Å–∫–∏ –∫–æ –≤—Å–µ–π –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω–µ
            // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ:
            // 1. –°–æ–∑–¥–∞—Ç—å 3D mesh –∏–∑ 2D pixel mask
            // 2. –°–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ AR plane
            // 3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ü–≤–µ—Ç–æ–º –∫—Ä–∞—Å–∫–∏
            
            // –í–†–ï–ú–ï–ù–ù–û: –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä —Å—Ç–µ–Ω—ã
            Vector2 centerScreen = new Vector2(
                normalizedPos.x * Screen.width,
                normalizedPos.y * Screen.height
            );
            
            List<ARRaycastHit> hits = new List<ARRaycastHit>();
            if (raycastManager.Raycast(centerScreen, hits, TrackableType.PlaneWithinPolygon))
            {
                foreach (var hit in hits)
                {
                    var plane = planeManager.GetPlane(hit.trackableId);
                    if (plane != null && plane.alignment == PlaneAlignment.Vertical)
                    {
                        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –∫—Ä–∞—Å–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω—ã
                        PaintWall(hit.pose.position, hit.pose.rotation, plane);
                        Debug.Log($"[WallDetection] ‚úÖ –í–°–Ø –°–¢–ï–ù–ê –≤—ã–¥–µ–ª–µ–Ω–∞! ({wallPixels.Count} –ø–∏–∫—Å–µ–ª–µ–π)");
                        
                        // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ —Å—Ç–µ–Ω—ã, –∞ –Ω–µ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// –û–∫—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–µ–Ω—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        /// –†–ï–ñ–ò–ú DULUX: –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç –í–°–Æ –°–¢–ï–ù–£ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º!
        /// </summary>
        private void PaintWall(Vector3 position, Quaternion rotation, ARPlane plane)
        {
            if (fillWholeWallMode && wallPaintingManager != null)
            {
                // üé® –†–ï–ñ–ò–ú DULUX: –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –í–°–Æ –°–¢–ï–ù–£!
                wallPaintingManager.PaintWall(plane, paintColor);
                
                Debug.Log($"[WallDetection] üé® –í–°–Ø –°–¢–ï–ù–ê –æ–∫—Ä–∞—à–µ–Ω–∞! Plane: {plane.trackableId}, —Ä–∞–∑–º–µ—Ä: {plane.size}, —Ü–≤–µ—Ç: {paintColor}");
            }
            else
            {
                // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: —Ç–æ—á–µ—á–Ω–∞—è –ø–æ–∫—Ä–∞—Å–∫–∞ (–º–∞–ª–µ–Ω—å–∫–∞—è —Å—Ñ–µ—Ä–∞)
                GameObject paintMark = Instantiate(paintPrefab, position, rotation);
                paintMark.SetActive(true); // ‚úÖ –ê–ö–¢–ò–í–ò–†–£–ï–ú!
                paintMark.transform.localScale = Vector3.one * paintSize;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
                var renderer = paintMark.GetComponent<Renderer>();
                if (renderer != null)
                {
                    renderer.material.color = paintColor;
                }

                // –°–¥–≤–∏–≥–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–ø–µ—Ä—ë–¥ –æ—Ç —Å—Ç–µ–Ω—ã, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–∏–¥–Ω–∞
                paintMark.transform.position += paintMark.transform.forward * 0.01f;

                paintMarks.Add(paintMark);
                
                // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                StartCoroutine(AnimatePaintMark(paintMark));
                
                Debug.Log($"[WallDetection] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–µ—Ç–∫–∞ –∫—Ä–∞—Å–∫–∏ #{paintMarks.Count} –Ω–∞ {position}");
            }
            
            // Haptic feedback (–≤–∏–±—Ä–∞—Ü–∏—è) - –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö
            #if UNITY_IOS || UNITY_ANDROID
            Handheld.Vibrate();
            #endif
        }

        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –≤—Å—é –∫—Ä–∞—Å–∫—É (–∏ —Å–æ —Å—Ç–µ–Ω, –∏ —Ç–æ—á–µ—á–Ω—ã–µ –º–µ—Ç–∫–∏)
        /// </summary>
        [ContextMenu("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫—Ä–∞—Å–∫—É")]
        public void ClearAllPaint()
        {
            // –û—á–∏—â–∞–µ–º –∑–∞–ª–∏–≤–∫–∏ —Å—Ç–µ–Ω (Dulux —Ä–µ–∂–∏–º)
            if (wallPaintingManager != null)
            {
                wallPaintingManager.UnpaintAllWalls();
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–æ—á–µ—á–Ω—ã–µ –º–µ—Ç–∫–∏ (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)
            foreach (var mark in paintMarks)
            {
                if (mark != null)
                {
                    Destroy(mark);
                }
            }
            paintMarks.Clear();
            
            Debug.Log("[WallDetection] ‚úÖ –í—Å—è –∫—Ä–∞—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞!");
        }

        /// <summary>
        /// –ú–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫—Ä–∞—Å–∫–∏ (–¥–ª—è –±—É–¥—É—â–∏—Ö –æ–∫—Ä–∞—Å–æ–∫)
        /// </summary>
        public void SetPaintColor(Color color)
        {
            paintColor = color;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ WallPaintingManager
            if (wallPaintingManager != null)
            {
                wallPaintingManager.SetPaintColor(color);
            }
            
            Debug.Log($"[WallDetection] üé® –¶–≤–µ—Ç –∫—Ä–∞—Å–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {color}");
        }

        /// <summary>
        /// –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–µ—Ñ–∞–± –¥–ª—è –∫—Ä–∞—Å–∫–∏
        /// </summary>
        private GameObject CreateDefaultPaintPrefab()
        {
            GameObject prefab = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            prefab.name = "PaintMark";
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä (–Ω–µ –Ω—É–∂–µ–Ω)
            var collider = prefab.GetComponent<Collider>();
            if (collider != null)
            {
                Destroy(collider);
            }

            // –°–æ–∑–¥–∞—ë–º –º–∞—Ç–µ—Ä–∏–∞–ª
            var renderer = prefab.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material = new Material(Shader.Find("Universal Render Pipeline/Lit"));
                renderer.material.color = paintColor;
            }

            prefab.SetActive(false);
            return prefab;
        }

        /// <summary>
        /// –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        /// </summary>
        private Material CreateDefaultMaterial(Color color)
        {
            Material mat = new Material(Shader.Find("Universal Render Pipeline/Lit"));
            mat.SetFloat("_Surface", 1); // Transparent
            mat.SetFloat("_Blend", 0); // Alpha
            mat.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            mat.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            mat.SetInt("_ZWrite", 0);
            mat.EnableKeyword("_SURFACE_TYPE_TRANSPARENT");
            mat.renderQueue = 3000;
            mat.color = color;
            return mat;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–µ–Ω
        /// </summary>
        public int GetWallCount()
        {
            return detectedWalls.Count;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        /// </summary>
        public string GetStatusInfo()
        {
            return $"–°—Ç–µ–Ω: {detectedWalls.Count}\n–ú–µ—Ç–æ–∫ –∫—Ä–∞—Å–∫–∏: {paintMarks.Count}\n–¶–≤–µ—Ç: {paintColor}";
        }

        /// <summary>
        /// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏ –∫—Ä–∞—Å–∫–∏
        /// </summary>
        private System.Collections.IEnumerator AnimatePaintMark(GameObject paintMark)
        {
            if (paintMark == null) yield break;
            
            Vector3 originalScale = paintMark.transform.localScale;
            Vector3 startScale = originalScale * 0.1f;
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            paintMark.transform.localScale = startScale;
            
            // –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞ 0.2 —Å–µ–∫—É–Ω–¥—ã
            float duration = 0.2f;
            float elapsed = 0f;
            
            while (elapsed < duration)
            {
                elapsed += Time.deltaTime;
                float t = elapsed / duration;
                
                // Ease-out cubic –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                t = 1f - Mathf.Pow(1f - t, 3f);
                
                if (paintMark != null)
                {
                    paintMark.transform.localScale = Vector3.Lerp(startScale, originalScale, t);
                }
                
                yield return null;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if (paintMark != null)
            {
                paintMark.transform.localScale = originalScale;
            }
        }

        private void OnDestroy()
        {
            ClearAllPaint();
        }
    }
}

