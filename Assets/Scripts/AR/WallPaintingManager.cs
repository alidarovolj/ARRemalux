using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;

namespace RemaluxAR.AR
{
    /// <summary>
    /// –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–∫—Ä–∞—Å–∫–æ–π —Å—Ç–µ–Ω - "Fill Whole Wall" —Ä–µ–∂–∏–º (–∫–∞–∫ Dulux)
    /// –ö–ª–∏–∫ –Ω–∞ —Å—Ç–µ–Ω—É ‚Üí –≤—Å—è —Å—Ç–µ–Ω–∞ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    /// </summary>
    public class WallPaintingManager : MonoBehaviour
    {
        [Header("Paint Settings")]
        [Tooltip("–¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç –∫—Ä–∞—Å–∫–∏")]
        [SerializeField] private Color paintColor = new Color(0.89f, 0.82f, 0.76f); // –ë–µ–∂–µ–≤—ã–π –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        
        [Tooltip("–ê–ª—å—Ñ–∞ –∫–∞–Ω–∞–ª (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å) 0.5-0.9 –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏")]
        [SerializeField] private float paintAlpha = 0.85f;
        
        [Header("Materials")]
        [Tooltip("Shader –¥–ª—è –æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω")]
        [SerializeField] private Shader paintShader;
        
        // –û–∫—Ä–∞—à–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã
        private Dictionary<ARPlane, Material> paintedWalls = new Dictionary<ARPlane, Material>();
        
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–¥–ª—è –æ—Ç–∫–∞—Ç–∞)
        private Dictionary<ARPlane, Material> originalMaterials = new Dictionary<ARPlane, Material>();
        
        private void Awake()
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º URP Lit shader –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏
            if (paintShader == null)
            {
                paintShader = Shader.Find("Universal Render Pipeline/Lit");
                
                if (paintShader == null)
                {
                    Debug.LogWarning("[WallPainting] URP Lit shader –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Standard");
                    paintShader = Shader.Find("Standard");
                }
            }
        }
        
        /// <summary>
        /// –û–∫—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–µ–Ω—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        /// </summary>
        public void PaintWall(ARPlane wall, Color? customColor = null)
        {
            if (wall == null)
            {
                Debug.LogWarning("[WallPainting] Wall is null!");
                return;
            }
            
            Color colorToUse = customColor ?? paintColor;
            colorToUse.a = paintAlpha;
            
            var meshRenderer = wall.GetComponent<MeshRenderer>();
            
            if (meshRenderer == null)
            {
                Debug.LogWarning($"[WallPainting] ‚ùå –°—Ç–µ–Ω–∞ {wall.trackableId} –Ω–µ –∏–º–µ–µ—Ç MeshRenderer!");
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            if (!originalMaterials.ContainsKey(wall))
            {
                originalMaterials[wall] = meshRenderer.material;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫—Ä–∞—Å–∫–∏
            Material paintMaterial;
            
            if (paintedWalls.ContainsKey(wall))
            {
                // –°—Ç–µ–Ω–∞ —É–∂–µ –æ–∫—Ä–∞—à–µ–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç
                paintMaterial = paintedWalls[wall];
                paintMaterial.color = colorToUse;
                Debug.Log($"[WallPainting] üé® –û–±–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç —Å—Ç–µ–Ω—ã {wall.trackableId} ‚Üí {colorToUse}");
            }
            else
            {
                // –ü–µ—Ä–≤–∞—è –æ–∫—Ä–∞—Å–∫–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                paintMaterial = new Material(paintShader);
                ConfigurePaintMaterial(paintMaterial, colorToUse);
                
                meshRenderer.material = paintMaterial;
                paintedWalls[wall] = paintMaterial;
                
                Debug.Log($"[WallPainting] ‚úÖ –°—Ç–µ–Ω–∞ –æ–∫—Ä–∞—à–µ–Ω–∞: {wall.trackableId}, —Ä–∞–∑–º–µ—Ä: {wall.size}, —Ü–≤–µ—Ç: {colorToUse}");
            }
            
            // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            #if UNITY_IOS || UNITY_ANDROID
            Handheld.Vibrate();
            #endif
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –∫—Ä–∞—Å–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞
        /// </summary>
        private void ConfigurePaintMaterial(Material mat, Color color)
        {
            mat.color = color;
            
            // URP/Lit shader –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (mat.HasProperty("_Surface"))
            {
                // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ä–µ–∂–∏–º
                mat.SetFloat("_Surface", 1); // 1 = Transparent
                mat.SetFloat("_Blend", 0); // 0 = Alpha blending
                
                // Blend mode
                mat.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
                mat.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
                mat.SetInt("_ZWrite", 0);
                
                mat.EnableKeyword("_SURFACE_TYPE_TRANSPARENT");
                mat.EnableKeyword("_ALPHAPREMULTIPLY_ON");
                
                mat.renderQueue = 3000; // Transparent queue
            }
            
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–≤–µ—â–µ–Ω–∏—è
            if (mat.HasProperty("_Smoothness"))
            {
                mat.SetFloat("_Smoothness", 0.3f); // –ú–∞—Ç–æ–≤–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (–∫–∞–∫ –∫—Ä–∞—Å–∫–∞)
            }
            
            if (mat.HasProperty("_Metallic"))
            {
                mat.SetFloat("_Metallic", 0.0f); // –ù–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è
            }
        }
        
        /// <summary>
        /// –£–¥–∞–ª—è–µ—Ç –∫—Ä–∞—Å–∫—É —Å–æ —Å—Ç–µ–Ω—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª)
        /// </summary>
        public void UnpaintWall(ARPlane wall)
        {
            if (wall == null || !paintedWalls.ContainsKey(wall))
                return;
            
            var meshRenderer = wall.GetComponent<MeshRenderer>();
            
            if (meshRenderer != null && originalMaterials.ContainsKey(wall))
            {
                meshRenderer.material = originalMaterials[wall];
            }
            
            // –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∫—Ä–∞—Å–∫–∏
            if (paintedWalls.ContainsKey(wall))
            {
                Destroy(paintedWalls[wall]);
                paintedWalls.Remove(wall);
            }
            
            Debug.Log($"[WallPainting] ‚ùå –ö—Ä–∞—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —Å–æ —Å—Ç–µ–Ω—ã {wall.trackableId}");
        }
        
        /// <summary>
        /// –û—á–∏—â–∞–µ—Ç –∫—Ä–∞—Å–∫—É —Å–æ –≤—Å–µ—Ö —Å—Ç–µ–Ω
        /// </summary>
        public void UnpaintAllWalls()
        {
            foreach (var kvp in paintedWalls)
            {
                ARPlane wall = kvp.Key;
                
                if (wall != null)
                {
                    var meshRenderer = wall.GetComponent<MeshRenderer>();
                    
                    if (meshRenderer != null && originalMaterials.ContainsKey(wall))
                    {
                        meshRenderer.material = originalMaterials[wall];
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º material
                Destroy(kvp.Value);
            }
            
            paintedWalls.Clear();
            Debug.Log("[WallPainting] ‚úÖ –í—Å—è –∫—Ä–∞—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞!");
        }
        
        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∫—Ä–∞—Å–∫–∏
        /// </summary>
        public void SetPaintColor(Color color)
        {
            paintColor = color;
            Debug.Log($"[WallPainting] –¶–≤–µ—Ç –∫—Ä–∞—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {color}");
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä–∞—à–µ–Ω–∞ –ª–∏ —Å—Ç–µ–Ω–∞
        /// </summary>
        public bool IsWallPainted(ARPlane wall)
        {
            return paintedWalls.ContainsKey(wall);
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –æ–∫—Ä–∞—Å–∫–∏ —Å—Ç–µ–Ω—ã
        /// </summary>
        public Color? GetWallColor(ARPlane wall)
        {
            if (paintedWalls.ContainsKey(wall))
            {
                return paintedWalls[wall].color;
            }
            return null;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö —Å—Ç–µ–Ω
        /// </summary>
        public int GetPaintedWallsCount()
        {
            return paintedWalls.Count;
        }
        
        private void OnDestroy()
        {
            // Cleanup
            foreach (var mat in paintedWalls.Values)
            {
                if (mat != null)
                    Destroy(mat);
            }
        }
    }
}

