using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.ARFoundation;
using UnityEngine.XR.ARSubsystems;

namespace RemaluxAR.ML
{
    /// <summary>
    /// –ì–ò–ë–†–ò–î–ù–´–ô –î–ï–¢–ï–ö–¢–û–† –°–¢–ï–ù - –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞:
    /// 1. Depth Anything V2 - –≥–µ–æ–º–µ—Ç—Ä–∏—è (–∫–∞—Ä—Ç–∞ –≥–ª—É–±–∏–Ω—ã)
    /// 2. DeepLabV3/DETR - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (person, furniture)
    /// 3. AR Planes - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
    /// 
    /// –ê–ª–≥–æ—Ä–∏—Ç–º:
    /// - Depth map ‚Üí –Ω–∞—Ö–æ–¥–∏–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Å consistent depth
    /// - Semantic segmentation ‚Üí –∏—Å–∫–ª—é—á–∞–µ–º non-wall –æ–±—ä–µ–∫—Ç—ã (person, furniture)
    /// - AR Planes ‚Üí –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    /// </summary>
    public class HybridWallDetector : MonoBehaviour
    {
        [Header("ML Components")]
        [Tooltip("Depth Estimation Manager (Depth Anything V2)")]
        [SerializeField] private DepthEstimationManager depthManager;
        
        [Tooltip("Semantic Segmentation Manager (DeepLabV3 –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤)")]
        [SerializeField] private MLSegmentationManager segmentationManager;
        
        [Header("AR Components")]
        [Tooltip("AR Plane Manager –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π")]
        [SerializeField] private ARPlaneManager arPlaneManager;
        
        [Header("Wall Detection Parameters - DEBUG MODE")]
        [Tooltip("üî• DEBUG: 0.2 –º¬≤ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ú–Ø–ì–ö–û!")]
        [SerializeField] private float minWallArea = 0.2f;
        
        [Tooltip("Depth consistency threshold (0-1). –ú–µ–Ω—å—à–µ = —Å—Ç—Ä–æ–∂–µ")]
        [SerializeField] private float depthConsistencyThreshold = 0.05f;
        
        [Tooltip("üî• DEBUG: 0.1 –º - –ø–æ—á—Ç–∏ –Ω–∞ –ø–æ–ª—É!")]
        [SerializeField] private float minWallHeightFromFloor = 0.1f;
        
        [Header("Object Filtering (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û)")]
        [Tooltip("‚ö†Ô∏è –û–¢–ö–õ–Æ–ß–ï–ù–û: DeepLabV3 PASCAL VOC –Ω–µ –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å–∞ 'wall'")]
        [SerializeField] private bool filterPeople = false;
        
        [Tooltip("‚ö†Ô∏è –û–¢–ö–õ–Æ–ß–ï–ù–û: –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å false positives")]
        [SerializeField] private bool filterFurniture = false;
        
        [Tooltip("‚ö†Ô∏è –û–¢–ö–õ–Æ–ß–ï–ù–û: –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å false positives")]
        [SerializeField] private bool filterElectronics = false;
        
        // COCO class IDs (DeepLabV3 PASCAL VOC)
        private const int PERSON_CLASS = 15;
        private const int CHAIR_CLASS = 9;
        private const int SOFA_CLASS = 18;
        private const int DININGTABLE_CLASS = 11;
        private const int TV_CLASS = 20;
        
        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã
        private Dictionary<TrackableId, WallInfo> detectedWalls = new Dictionary<TrackableId, WallInfo>();
        
        /// <summary>
        /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç–µ–Ω–µ
        /// </summary>
        public class WallInfo
        {
            public ARPlane arPlane;
            public float averageDepth;
            public float depthConsistency;
            public bool hasNonWallObjects;
            public Vector3 center;
            public Vector2 size;
            public float confidence; // 0-1
        }
        
        private void Awake()
        {
            if (depthManager == null)
                depthManager = FindObjectOfType<DepthEstimationManager>();
            
            if (segmentationManager == null)
                segmentationManager = FindObjectOfType<MLSegmentationManager>();
            
            if (arPlaneManager == null)
                arPlaneManager = FindObjectOfType<ARPlaneManager>();
        }
        
        private void OnEnable()
        {
            if (arPlaneManager != null)
            {
                arPlaneManager.planesChanged += OnPlanesChanged;
                Debug.Log("[HybridWallDetector] ‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ AR Plane events");
            }
        }
        
        private void OnDisable()
        {
            if (arPlaneManager != null)
            {
                arPlaneManager.planesChanged -= OnPlanesChanged;
            }
        }
        
        private void OnPlanesChanged(ARPlanesChangedEventArgs args)
        {
            // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
            if (args.added.Count > 0)
            {
                Debug.Log($"[HybridWallDetector] üÜï ARKit –Ω–∞—à–µ–ª {args.added.Count} –Ω–æ–≤—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
            }
            
            if (args.updated.Count > 0)
            {
                Debug.Log($"[HybridWallDetector] üîÑ ARKit –æ–±–Ω–æ–≤–∏–ª {args.updated.Count} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
            }
            
            if (args.removed.Count > 0)
            {
                Debug.Log($"[HybridWallDetector] ‚ùå ARKit —É–¥–∞–ª–∏–ª {args.removed.Count} –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π");
            }
            
            foreach (var plane in args.added)
            {
                AnalyzePlane(plane);
            }
            
            foreach (var plane in args.updated)
            {
                AnalyzePlane(plane);
            }
            
            foreach (var plane in args.removed)
            {
                if (detectedWalls.ContainsKey(plane.trackableId))
                {
                    detectedWalls.Remove(plane.trackableId);
                }
            }
        }
        
        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç AR Plane —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Depth + Segmentation
        /// </summary>
        private void AnalyzePlane(ARPlane plane)
        {
            Vector2 planeSize = plane.size;
            float planeArea = planeSize.x * planeSize.y;
            float centerY = plane.transform.position.y;
            
            // DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            Debug.Log($"[HybridWallDetector] üìê –ü–ª–æ—Å–∫–æ—Å—Ç—å: " +
                     $"ID={plane.trackableId}, " +
                     $"Alignment={plane.alignment}, " +
                     $"Size={planeSize.x:F2}√ó{planeSize.y:F2}–º, " +
                     $"Area={planeArea:F2}–º¬≤, " +
                     $"CenterY={centerY:F2}–º");
            
            // –§–∏–ª—å—Ç—Ä 1: –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            if (plane.alignment != PlaneAlignment.Vertical)
            {
                Debug.Log($"[HybridWallDetector] ‚ùå –ò–≥–Ω–æ—Ä: –ù–ï –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è (alignment={plane.alignment})");
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä 2: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            if (planeArea < minWallArea)
            {
                Debug.Log($"[HybridWallDetector] ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç–∞: {planeArea:F2}–º¬≤ < {minWallArea}–º¬≤");
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ—Ç –ø–æ–ª–∞
            if (centerY < minWallHeightFromFloor)
            {
                Debug.Log($"[HybridWallDetector] ‚ùå –ò–≥–Ω–æ—Ä: —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ (centerY={centerY:F2} < {minWallHeightFromFloor}–º)");
                return;
            }
            
            // === DEPTH ANALYSIS (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û) ===
            // Depth estimation –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è AR frame integration
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ AR Planes + Segmentation
            
            Camera arCamera = Camera.main;
            if (arCamera == null)
                return;
            
            Vector3 screenPos = arCamera.WorldToViewportPoint(plane.center);
            Vector2 normalizedPos = new Vector2(screenPos.x, screenPos.y);
            
            // Fallback: –±–µ–∑ depth –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            float averageDepth = 0.5f; // Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
            
            // NOTE: Depth check –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–≥–¥–∞ AR frame integration –≥–æ—Ç–æ–≤
            
            // === SEMANTIC SEGMENTATION FILTERING ===
            bool hasNonWallObjects = CheckForNonWallObjects(normalizedPos);
            
            if (hasNonWallObjects)
            {
                Debug.LogWarning($"[HybridWallDetector] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã non-wall –æ–±—ä–µ–∫—Ç—ã (person/furniture): {planeSize}");
                
                // –ù–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ —Å–Ω–∏–∂–∞–µ–º confidence
            }
            
            // === COMPUTE CONFIDENCE ===
            float confidence = ComputeWallConfidence(plane, averageDepth, !hasNonWallObjects);
            
            if (confidence > 0.5f)
            {
                WallInfo wallInfo = new WallInfo
                {
                    arPlane = plane,
                    averageDepth = averageDepth,
                    depthConsistency = 0.95f, // TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ
                    hasNonWallObjects = hasNonWallObjects,
                    center = plane.center,
                    size = planeSize,
                    confidence = confidence
                };
                
                detectedWalls[plane.trackableId] = wallInfo;
                
                Debug.Log($"[HybridWallDetector] ‚úÖ –°–¢–ï–ù–ê –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {planeSize.x:F2}–º √ó {planeSize.y:F2}–º, " +
                         $"depth: {averageDepth:F2}, confidence: {confidence:F2}");
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ non-wall –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–≥–∏–æ–Ω–µ
        /// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private bool CheckForNonWallObjects(Vector2 normalizedPos)
        {
            // –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º segmentation —Ñ–∏–ª—å—Ç—Ä —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å false positives
            // DeepLabV3 –æ–±—É—á–µ–Ω–∞ –Ω–∞ PASCAL VOC (–Ω–µ—Ç –∫–ª–∞—Å—Å–∞ "wall")
            // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ADE20K –º–æ–¥–µ–ª—å –¥–ª—è production
            
            if (segmentationManager == null || !segmentationManager.IsInitialized)
            {
                // –ù–µ—Ç segmentation - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ
                return false;
            }
            
            // –ú–û–ñ–ù–û –í–ö–õ–Æ–ß–ò–¢–¨ –í–†–£–ß–ù–£–Æ –≤ Inspector:
            // filterPeople = true, filterFurniture = true, filterElectronics = true
            
            if (!filterPeople && !filterFurniture && !filterElectronics)
            {
                // –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
                return false;
            }
            
            int pixelClass = segmentationManager.GetPixelClass(normalizedPos);
            
            // DeepLabV3 PASCAL VOC classes
            if (filterPeople && pixelClass == PERSON_CLASS)
            {
                Debug.Log($"[HybridWallDetector] üö∂ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –≤ —Ä–µ–≥–∏–æ–Ω–µ");
                return true;
            }
            
            if (filterFurniture && (pixelClass == CHAIR_CLASS || pixelClass == SOFA_CLASS || pixelClass == DININGTABLE_CLASS))
            {
                Debug.Log($"[HybridWallDetector] ü™ë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–µ–±–µ–ª—å –≤ —Ä–µ–≥–∏–æ–Ω–µ");
                return true;
            }
            
            if (filterElectronics && pixelClass == TV_CLASS)
            {
                Debug.Log($"[HybridWallDetector] üì∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ");
                return true;
            }
            
            return false;
        }
        
        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç confidence score –¥–ª—è —Å—Ç–µ–Ω—ã
        /// </summary>
        private float ComputeWallConfidence(ARPlane plane, float depth, bool noObjects)
        {
            float confidence = 0.5f; // Base confidence from AR Plane
            
            // Depth consistency boost
            if (depthManager != null && depthManager.IsInitialized)
            {
                confidence += 0.2f;
            }
            
            // No non-wall objects boost
            if (noObjects)
            {
                confidence += 0.2f;
            }
            
            // Size boost (larger = more confident)
            float area = plane.size.x * plane.size.y;
            if (area > 2.0f)
                confidence += 0.1f;
            
            return Mathf.Clamp01(confidence);
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–Ω–µ –ø–æ TrackableId
        /// </summary>
        public WallInfo GetWallInfo(TrackableId trackableId)
        {
            return detectedWalls.ContainsKey(trackableId) ? detectedWalls[trackableId] : null;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ AR Plane —Å—Ç–µ–Ω–æ–π
        /// </summary>
        public bool IsWall(ARPlane plane)
        {
            return detectedWalls.ContainsKey(plane.trackableId);
        }
        
        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã
        /// </summary>
        public Dictionary<TrackableId, WallInfo> GetAllWalls()
        {
            return detectedWalls;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ screen position —Å—Ç–µ–Ω–æ–π (–¥–ª—è –∫–ª–∏–∫–∞)
        /// </summary>
        public bool IsWallAtScreenPosition(Vector2 screenPosition, out WallInfo wallInfo)
        {
            wallInfo = null;
            
            Camera arCamera = Camera.main;
            if (arCamera == null)
                return false;
            
            // Raycast –æ—Ç screen position
            Ray ray = arCamera.ScreenPointToRay(screenPosition);
            
            foreach (var kvp in detectedWalls)
            {
                ARPlane plane = kvp.Value.arPlane;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ª—É—á–∞ —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é
                Plane geometryPlane = new Plane(plane.transform.up, plane.center);
                
                if (geometryPlane.Raycast(ray, out float distance))
                {
                    Vector3 hitPoint = ray.GetPoint(distance);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ bounds –ø–ª–æ—Å–∫–æ—Å—Ç–∏
                    Vector3 localPoint = plane.transform.InverseTransformPoint(hitPoint);
                    
                    if (Mathf.Abs(localPoint.x) <= plane.size.x / 2f &&
                        Mathf.Abs(localPoint.y) <= plane.size.y / 2f)
                    {
                        wallInfo = kvp.Value;
                        return true;
                    }
                }
            }
            
            return false;
        }
    }
}

